// swift-tools-version: 6.1

import PackageDescription

let package = Package(
    name: "par2cmdline-turbo",
    products: [
        .library(
            name: "par2cmdline",
            targets: [
                "par2cmdline",
            ],
        ),
        .library(
            name: "gf16",
            targets: [
                "gf16",
            ],
        ),
        .library(
            name: "hasher",
            targets: [
                "hasher",
            ]
        ),
    ],
    targets: [
        .target(
            name: "par2cmdline",
            dependencies: [
                .byNameItem(name: "gf16", condition: nil),
                .byNameItem(name: "hasher", condition: nil),
            ],
            path: "src",
            sources: [
                "commandline.cpp",
                "crc.cpp",
                "creatorpacket.cpp",
                "criticalpacket.cpp",
                "datablock.cpp",
                "descriptionpacket.cpp",
                "diskfile.cpp",
                "filechecksummer.cpp",
                "galois.cpp",
                "libpar2.cpp",
                "mainpacket.cpp",
                "md5.cpp",
                "par1fileformat.cpp",
                "par1repairer.cpp",
                "par1repairersourcefile.cpp",
                "par2creator.cpp",
                "par2creatorsourcefile.cpp",
                "par2fileformat.cpp",
                "par2repairer.cpp",
                "par2repairersourcefile.cpp",
                "recoverypacket.cpp",
                "reedsolomon.cpp",
                "utf8.cpp",
                "verificationhashtable.cpp",
                "verificationpacket.cpp",
            ],
            publicHeadersPath: "",
            cxxSettings: [
                .define("NDEBUG"),
                .define("PACKAGE", to: "\"par2cmdline\""),
                .define("VERSION", to: "\"1.0.0\""),
                .define("X_PACKAGE", to: "\"par2cmdline-turbo\""),
                .define("X_VERSION", to: "\"1.3.0\""),
                .define("PARPAR_ENABLE_HASHER_MD5CRC"),
            ],
        ),
        .target(
            name: "gf16",
            path: "parpar/gf16",
            sources: [
                "controller.cpp",
                "controller_cpu.cpp",
                "gf16_affine_avx2.c",
                "gf16_affine_avx10.c",
                "gf16_affine_avx512.c",
                "gf16_affine_gfni.c",
                "gf16_cksum_avx2.c",
                "gf16_cksum_avx512.c",
                "gf16_cksum_generic.c",
                "gf16_cksum_neon.c",
                "gf16_cksum_rvv.c",
                "gf16_cksum_sse2.c",
                "gf16_cksum_sve.c",
                "gf16_clmul_neon.c",
                "gf16_clmul_rvv.c",
                "gf16_clmul_sha3.c",
                "gf16_clmul_sve2.c",
                "gf16_lookup.c",
                "gf16_lookup_sse2.c",
                "gf16_shuffle2x128_sve2.c",
                "gf16_shuffle128_rvv.c",
                "gf16_shuffle128_sve.c",
                "gf16_shuffle128_sve2.c",
                "gf16_shuffle512_sve2.c",
                "gf16_shuffle_avx.c",
                "gf16_shuffle_avx2.c",
                "gf16_shuffle_avx512.c",
                "gf16_shuffle_neon.c",
                "gf16_shuffle_ssse3.c",
                "gf16_shuffle_vbmi.c",
                "gf16_xor_avx2.c",
                "gf16_xor_avx512.c",
                "gf16_xor_sse2.c",
                "gf16mul.cpp",
                "gf16pmul.cpp",
                "gf16pmul_avx2.c",
                "gf16pmul_neon.c",
                "gf16pmul_rvv.c",
                "gf16pmul_sse.c",
                "gf16pmul_sve2.c",
                "gf16pmul_vpclgfni.c",
                "gf16pmul_vpclmul.c",
                "gf_add_avx2.c",
                "gf_add_avx10.c",
                "gf_add_avx512.c",
                "gf_add_generic.c",
                "gf_add_neon.c",
                "gf_add_rvv.c",
                "gf_add_sse2.c",
                "gf_add_sve.c",
                "gf_add_sve2.c",
                "gfmat_coeff.c",
                "gfmat_inv.cpp",
            ],
            publicHeadersPath: "",
            cxxSettings: [
                .define("PARPAR_INVERT_SUPPORT"),
                .define("PARPAR_SLIM_GF16"),
            ],
        ),
        .target(
            name: "hasher",
            path: "parpar/hasher",
            sources: [
                "crc_zeropad.c",
                "hasher.cpp",
                "hasher_armcrc.cpp",
                "hasher_avx2.cpp",
                "hasher_avx512.cpp",
                "hasher_avx512vl.cpp",
                "hasher_bmi1.cpp",
                "hasher_clmul.cpp",
                "hasher_input.cpp",
                "hasher_md5crc.cpp",
                "hasher_neon.cpp",
                "hasher_neoncrc.cpp",
                "hasher_rvzbc.cpp",
                "hasher_scalar.cpp",
                "hasher_sse.cpp",
                "hasher_sve2.cpp",
                "hasher_xop.cpp",
                "md5-final.c",
                "tables.cpp",
            ],
            publicHeadersPath: "",
        ),
    ],
    cxxLanguageStandard: .cxx14,
)
